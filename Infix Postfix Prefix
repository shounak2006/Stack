#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX 100 


int precedence(char ch);
void infixToPostfix(char *infix, char *postfix);
void infixToPrefix(char *infix, char *prefix);

// Check precedence of operators
int precedence(char ch) {
    if (ch == '+' || ch == '-') {
        return 1;
    } else if (ch == '*' || ch == '/') {
        return 2;
    }
    return 0;
}

// Infix to Postfix conversion
void infixToPostfix(char *infix, char *postfix) {
    char stack[MAX];
    int top = -1;
    int j = 0;
    
    for (int i = 0; infix[i] != '\0'; i++) {
        char ch = infix[i];

        if (isalnum(ch)) {
            postfix[j++] = ch;  // Operand, add directly to the result
        } else if (ch == '(') {
            stack[++top] = ch;  // Push opening parenthesis
        } else if (ch == ')') {
            // Pop from stack until opening parenthesis is found
            while (top != -1 && stack[top] != '(') {
                postfix[j++] = stack[top--];
            }
            top--;  // Pop '(' from stack
        } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            // Pop operators with higher or equal precedence
            while (top != -1 && precedence(stack[top]) >= precedence(ch)) {
                postfix[j++] = stack[top--];
            }
            stack[++top] = ch;  // Push the current operator to the stack
        }
    }

    // Pop any remaining operators from the stack
    while (top != -1) {
        postfix[j++] = stack[top--];
    }
    postfix[j] = '\0';  // Null-terminate the postfix expression
}

// Infix to Prefix conversion
void infixToPrefix(char *infix, char *prefix) {
    char stack[MAX];
    int top = -1;
    int len = strlen(infix);
    char reversed[MAX];

    // Reverse the infix expression
    for (int i = 0; i < len; i++) {
        reversed[i] = infix[len - 1 - i];
    }
    reversed[len] = '\0';

    // Reverse parentheses in the reversed expression
    for (int i = 0; i < len; i++) {
        if (reversed[i] == '(') {
            reversed[i] = ')';
        } else if (reversed[i] == ')') {
            reversed[i] = '(';
        }
    }

    // Convert the reversed expression to postfix
    char reversedPostfix[MAX];
    infixToPostfix(reversed, reversedPostfix);

    // Reverse the postfix expression to get the prefix
    int j = 0;
    for (int i = strlen(reversedPostfix) - 1; i >= 0; i--) {
        prefix[j++] = reversedPostfix[i];
    }
    prefix[j] = '\0';
}

int main() {
    char infix[MAX], postfix[MAX], prefix[MAX];

    // Take input for Infix expression
    printf("Enter Infix expression: ");
    scanf("%s", infix);

    // Convert to Postfix and Prefix
    infixToPostfix(infix, postfix);
    infixToPrefix(infix, prefix);

    // Display the results
    printf("Infix Expression: %s\n", infix);
    printf("Postfix Expression: %s\n", postfix);
    printf("Prefix Expression: %s\n", prefix);

    return 0;
}
